name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,tests]

    - name: Run tests
      run: |
        pytest --maxfail=1 -q --cov=raglib --cov-report=term-missing

    - name: Run benchmark smoke test
      if: matrix.python-version == '3.10'
      run: |
        python examples/benchmark_run.py --quick --list-techniques
      env:
        RUN_BENCH: "true"

    - name: Test plugin discovery
      if: matrix.python-version == '3.10'
      run: |
        python -c "
        from raglib.plugins import PluginLoader
        loader = PluginLoader()
        result = loader.discover()
        print('Plugin discovery test passed')
        print(f'Discovered: {result}')
        "

    - name: Validate release tools
      if: matrix.python-version == '3.10'
      run: |
        python tools/prepare_release.py --dry-run

    - name: Run linting with ruff
      run: |
        ruff check raglib/ tests/ examples/ tools/ || true

    - name: Run code formatting check with black
      run: |
        black --check --diff raglib/ tests/ examples/ tools/ || true

    - name: Upload coverage reports
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  docs:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'docs') }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Generate techniques index
      run: |
        python tools/generate_techniques_index.py

    - name: Validate benchmark system
      run: |
        python -c "
        from raglib.benchmark import BenchmarkHarness, load_qa_dataset
        # Test dataset loading
        qa_items = load_qa_dataset('tests/data/tiny_qa_dataset.jsonl')
        print(f'Loaded {len(qa_items)} QA items for docs build validation')
        "

    - name: Build documentation
      run: |
        mkdocs build --strict

    - name: Upload docs artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation-${{ github.sha }}
        path: site/
